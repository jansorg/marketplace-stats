// Code generated by "esc -o static.go -pkg report static"; DO NOT EDIT.

package report

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/static/report.gohtml": {
		name:    "report.gohtml",
		local:   "static/report.gohtml",
		size:    35732,
		modtime: 1629999159,
		compressed: `
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
`,
	},

	"/static": {
		name:  "static",
		local: `static`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"static": {
		_escData["/static/report.gohtml"],
	},
}
