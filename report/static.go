// Code generated by "esc -o static.go -pkg report static"; DO NOT EDIT.

package report

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/static/report.gohtml": {
		name:    "report.gohtml",
		local:   "static/report.gohtml",
		size:    35804,
		modtime: 1631101479,
		compressed: `
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
/1xVXk/ciwAA
`,
	},

	"/static": {
		name:  "static",
		local: `static`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"static": {
		_escData["/static/report.gohtml"],
	},
}
