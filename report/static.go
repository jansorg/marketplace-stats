// Code generated by "esc -o static.go -pkg report static"; DO NOT EDIT.

package report

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/static/report.gohtml": {
		name:    "report.gohtml",
		local:   "static/report.gohtml",
		size:    21142,
		modtime: 1604314409,
		compressed: `
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
XySt+NTcl85G2Q2H+d7ivwEAAP//YEZThZZSAAA=
`,
	},

	"/static": {
		name:  "static",
		local: `static`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"static": {
		_escData["/static/report.gohtml"],
	},
}
