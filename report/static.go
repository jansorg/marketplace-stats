// Code generated by "esc -o static.go -pkg report static"; DO NOT EDIT.

package report

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/static/report.gohtml": {
		name:    "report.gohtml",
		local:   "static/report.gohtml",
		size:    12588,
		modtime: 1602189193,
		compressed: `
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
+W40sD+8Gpj/JeK/AQAA///QS6p/LDEAAA==
`,
	},

	"/static": {
		name:  "static",
		local: `static`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"static": {
		_escData["/static/report.gohtml"],
	},
}
