// Code generated by "esc -o static.go -pkg report static"; DO NOT EDIT.

package report

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/static/report.gohtml": {
		name:    "report.gohtml",
		local:   "static/report.gohtml",
		size:    26380,
		modtime: 1612017794,
		compressed: `
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
`,
	},

	"/static": {
		name:  "static",
		local: `static`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"static": {
		_escData["/static/report.gohtml"],
	},
}
