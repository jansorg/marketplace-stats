// Code generated by "esc -o static.go -pkg report static"; DO NOT EDIT.

package report

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/static/report.gohtml": {
		name:    "report.gohtml",
		local:   "static/report.gohtml",
		size:    24694,
		modtime: 1610569744,
		compressed: `
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
AAD//zRgUYx2YAAA
`,
	},

	"/static": {
		name:  "static",
		local: `static`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"static": {
		_escData["/static/report.gohtml"],
	},
}
