// Code generated by "esc -o static.go -pkg report static"; DO NOT EDIT.

package report

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/static/report.gohtml": {
		name:    "report.gohtml",
		local:   "static/report.gohtml",
		size:    27473,
		modtime: 1612023047,
		compressed: `
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
`,
	},

	"/static": {
		name:  "static",
		local: `static`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"static": {
		_escData["/static/report.gohtml"],
	},
}
