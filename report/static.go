// Code generated by "esc -o static.go -pkg report static"; DO NOT EDIT.

package report

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/static/report.gohtml": {
		name:    "report.gohtml",
		local:   "static/report.gohtml",
		size:    20635,
		modtime: 1603466255,
		compressed: `
H4sIAAAAAAAC/+w83XLbNpf3foozbNJYqUhJdtJ1ZEnbNJ50M7O7zdjJ7uwlLEIiNxTJAqAVLYczfYi+
y95/j9In+QY//AcoSnEcd6bOjCOCBwcHB+cfR05TeEJwHBEG0zk4kGUn5dCHiKHg482VeHWDAkwdMXST
bPholp2czDy2CRYnMw8jd3ECADBjPgvwIk0VEud9kKz98F24ipz/RBucZSBQwbV4PRtJeDl3gxmCpYcI
xWxuffzw1r6w1CvKdgEGtovx3GL4MxstKVXv+M9P/kbsIiHB6TOPsZhOR6NVFDLqrKNoHWAU+9RZRhs+
7+xfV2jjB7v5vyMWTX2GguF27bGfxsPz8fhyPHwhfv+L+P1qPL6ciPEJH//e9WkcoN2cblH8bHB5UlAw
JVHEIC2e+Y9tc8b44dpeRkFEpvDdeDweX9xeNqDCaLsHIvDDTwXIi5cvXuIfmyCUET/G9u06B1ud8X8t
MBwjglhECnQXY/6vCRdH1Gf+HS7AJpNX+PxVi3S8RjWw1YrvoATLShaNngPBFDN4PirGuAAN4TZyd0Pw
JkPwzobgnQ8hHoLr3w2BodsAD4GRITBvCMwdAr1bD8HfrBvM3iCy9sMpNHYSI5efQGs88ENse9hfe2wK
E+eFiWJOIDC0pk2qG8tzYbOlXE3hGZesZ0OgKKQ2xcRfadHzbbd28dne+i7zpnAxHsefL7V7PCN4Ayhh
kRZtyccGcnVGd4icNkRzoMej2+NW8ezVuMFR8Zb6/4encOa8JHhTf8211kaBvw6nsMQhw0RP/JluUYl2
0kBbnXbeMc04SQnb7RAoI1G47trvhUGq0RDQ9M6nPsNuY77YsouXEUHMj8IphFGIL81HUmr5QLsUvWtS
qERlMh4/rePNJdsoJEKxGthuI+JiYRgCFFM8hfyTXgo5X2EshVHPG+bpOKKEIMArVkd8hwnzlyjIIW4R
xVxPDbi5OWjgL7TdEcQ5L4wCw7xpgCizl54fuBxT5VGP1CaSpaatTlc+qSGsPBswchaYEWLktjmozug2
YizaTGESfwYaBb6rRKhh3gcdqLn0q09dytPU463nM2zTGC0xF+gtQbF+kRV3iCb6WRQfSfzoOSwTyqJN
1SA7NLkVkUSHvDWNTqeVaKn/+bjbgbQNXuGQunXE2eAwacqHcL7cYlDmLz/tGpaU864LGWryHC0/rUmU
hG7upsn6Fp2evXw5hPKXczHoxPkDoOktXkUEt9xKyHDIpmDBP/4fLD0SYW9UkOICE66PkWnIPKkhp/gO
h4O9hCtBqcU6gw4DxwVDebphe6gt+YcIzLGa4dANCgKzyjkXJqPluJguh+D44TLaxAFmWIuFx8pT4IGt
vzTjOYoAeYz8rPSe6GXTEckJAdpFCZvCyv+MXT3mMNkMwdlEITfsjov0e7tDxEdc1pbRZhOFduCvEUsI
pnyhJEDEDpMNPdJieZII5qr/PUGGGNDQUxUV4RqM+7LjIKFdsVg92B6YEW38sBtTPR43YGKRi3adWPKE
ZHB5eEDkULzkxqtJp0qdprAKcCOu5SO26xM5cQok2moA+MFNoX58/Od/E8r81c4u7JA4avsWsy3GYSeN
PYW4rylXWG2dgivc9YCsjlwFVHuQb30XD+uP2mhOGxvqEPKMm+knX5g50YwsRZo+ErZncTIbyZLAyYwb
+sXJzJt01QRmI2/Cgc5gGSBK51buzq1FmjpXiGHnbUQ2iIF1Nh7/aI8n9vjMEvPOtPNA+CxxDHkFAYFH
8GpufZdvm0UMBTZFAabWQlQ2ZGliNkKmKQp4H9iaRFvmWYtfxP8dgMLaBTt76SUkxK61eCM/wEeKiVxB
bvEkTUfPZ65/V2xU6Zi1eD4SVZvRc7FEGwTqx1w8CefG16wh4D9lCcj54G9EBO5cEbS9+a9fIMvq641c
/67EUHk80VN7spfKhBAccs39BDV1qlR7ZlLccwxC2WrxRQVWwpcFqnKM1AcU4GLmnS0+eD4FToLg/mzE
PC1sTkGYbAqhaILORs2FOIyGHKko1bE0BYLCNQbnvzH+5FyhHYUs0xBCOKi/Aucd/SBMe5YpyoSlt9IU
h26Wtfcgp7tcyXJFZK4RrLbdNAVVDuT7/nhzJZ9yPc0y+HhzpUfXZkmaAg7d5uZmIw1TZiKv6HeW3KnR
GIVz68xqES942mcHfQ60TtNsJKRRCbvQiZO9gr/DiAS7byfz/yPXV2L8pWKvA32L+0K+R74LvybsK6kT
36pJlfZKP48ErQfWmH7o3mJ8f8j4EfyasEelzz1FMk3b1xVqHyal7kTzFuMvR6L4uR/LkfYlNzNHul0R
RTbCki+wPoWu5YFEh8q1tXePKkp7laYCqQoC9aehOxEhFP3BzUZLAw0i+JxbMpqUydoK85DRbNH2oHoN
JErWHmDK/A1PQqMVMA8DCsMEBUAwD5j8cA2EJ+UJthavr68PX2XJk0ZVWMOE8lUQCDmwFm8SypyDUf6H
FCJQsS0kPKRVEe6RDL2KtmEQIZdai+KjQQ1HWhMyMgpb2zDVXYbYjVaAWyGY5KWYYAjEwHfnlmCunac3
UpSLRzE7yyw9kxoWXB1T4ZIgTW0tLUZkBVIeLeVoyyKTtTgtHwazEYdaqL2YfcxX8IH37gfv3Rd2IX0t
VPZa6mnpCI7B13mSSmfS1JHH/ybXaklAluXG4wdowyi1zTJQXgDmGijBnywDkUN//93n15dc+vC2vVSI
t2o5HVi5GodTKyrAAIfgqIS4mJBlhUHJ6VOGRXBYQyUcJqMg6nWY8PwYrXGHBioDwRXt3xAVhF5zA91b
z4pzMu00WnHWF5jFdmqcyD8PBcu2XgS33Fmw3HbzfCK5pUvix8Lb+6HwHTHBd36U0NzA99jimsGplswB
jHvtuKh9iOOz+WlxawXcyHF7FRM/ZCuwnjpnKwvKTb8vjgKy7GlRS+mgFge01yH8+fsfe1G1g9i2TxHW
8PEQdahdcgpXqpS6I2vQelUzSdqA3xT07w/6esdslQKWKRGAriC+F85mVvDlGFspQh+Ui4d+awyt2kfa
loyvkLnIZKQoH0ZJyIiP6QOVTqolJlk6jGJ4kxPRXUdZPOUW/j7qhrW9tVOxJxv0GaZzmLRMtTTuQWHc
BeE7QdJAA17FNwfkuu9CBvZEO7u9ksZKFAH2KQ38Ja7jgLFYaXBopYYbNYXngPpM6Y5B7EaSkGVAUYBP
6UDYyrwnspnD9y6zlJEFFMiaDZcmoo+usxxVj3wsenVe0StxN7B8PIqlkkNF1y4XmcOlVSE4QFxP9kb/
ZjHmOh9isD7eXFlQWTwXcOXglIjvTfSOVqQyY7svbcox/hVUihu8kGKb7WL8rbzVTSU7eFw6VaXsaL06
sET/twt4tPKqvECedsKHXYwflcDmoXxOISfwoeS2vGXIVxfhz9+S/1UvmerJW5vzRyD5sguryXjsjMdP
H+7Kum4fWBT77jfLu34NXEwZFHUpg3G417SKRXGxnviWVPHk3ESE/bx7d6VPuPJqWg3DAF6a8q3aQnOQ
uVJ9dNyevSflqs8/wkq9u9pjYRaVqp9ayFbzajfoaPEA3q4oM3hn4v7F2IOVX1w1erFEp1lcdAFgurQW
4tUQtl4EMfJdWEXkoNIroNAF13fDZwxitBMQqgFKAjizUbw46b5N7bqkkuKGf+tfvK0rbaXdVyqBYF1e
wlUHaC3u61b3vCoV3vniq17udYr3n7//0VcmzV6nKoUddWAjy+s984/nAHL4d3tKkzJIe5D72aZkGw3w
XkaUBq64odhbUhfAYq1+oJwx8NUr7Vr5K+eXT+WnlnVstrLqrGBuMCXsEJbRJkYEu8Aijc2TJu3IYu9G
Wrhq18pD9ciJXfYLxD6G/m8Jhn09Co1ZqgejEsH0mVVpXO4fKcrbWbgumkfUpTScvr6+Hjx0113fLgtV
uIoYOO8Jvtvb1TBjRMiylMtOc3lEDmZKc4ye4y8ySW96el5jGll+SHvMAcejb3XJsmM6WfZc8x7GaEhT
ebFSimp50arsQ3Mgy/LvCqUpZ7R8Fl1kikRr7/1x2fvRQg6JXNYtu6jSVB5U5ZL9IHrvgyvang1Dv8l9
8sfQ0YIanXD7mHQI+ffBLk33lLal6n6ZpV1gH2v6k3ovctTormr3W92z/Oi7ufazpQ+hX2Ki9RGisRjw
pfl0K2Q0fa8Kft4VwY0KJI/9ilBetPgGcWDfXuIm6DtzaLbgvsz8Vl1lmwH0adZXueeUjO+qa8v8tFLt
ySepss/jqUbXKesuZFWhexTna/D9WhFqU/iJPsgVkKkoVv+io9DVuk61vnyqK1MILLZ4nas1q/6pKFJV
Wa/+BZuZd764QgxryhB5qaJiTDQgtdPm4K83/CAOApYiZSSgcXu6j8780qoKV55mTTurmVSawpMAUcbz
J5jOwZ5UMnjxRgbTzVf1kqG8YPiFREn8844zFhhJcLtWGBE4DXFlxbI/fVC+kStWetUH7aLWvsL9j1bl
W7vqDzKY7APnWVFL7tc53xiAOrwsOnvn+iKUtvRSsmReYYqpZF9yaV7lk0ZLSbVAIzOR6pk8EZ2x2BVn
Np3DCjVysMqduc4uGw6i8X02UzTxJMTbfGW5jRsmKgZ7c/Qa3R3ZVXWRPWBVjPOW/PaulGkLjKbLiob7
0jkC4/VFy+WY+26kvSl9Wa0pqLMDR+PYJLJ+vlG5nveY+FHXGr38U1Oa9eXGmncqvNJslA+IPyr4zwAA
AP//6yq0cptQAAA=
`,
	},

	"/static": {
		name:  "static",
		local: `static`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"static": {
		_escData["/static/report.gohtml"],
	},
}
