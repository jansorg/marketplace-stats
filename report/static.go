// Code generated by "esc -o static.go -pkg report static"; DO NOT EDIT.

package report

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/static/report.gohtml": {
		name:    "report.gohtml",
		local:   "static/report.gohtml",
		size:    22792,
		modtime: 1606590810,
		compressed: `
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
pWaudNRLbwRiGU7+EQAA//8ptrckCFkAAA==
`,
	},

	"/static": {
		name:  "static",
		local: `static`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"static": {
		_escData["/static/report.gohtml"],
	},
}
