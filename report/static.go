// Code generated by "esc -o static.go -pkg report static"; DO NOT EDIT.

package report

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/static/report.gohtml": {
		name:    "report.gohtml",
		local:   "static/report.gohtml",
		size:    27142,
		modtime: 1612021946,
		compressed: `
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
`,
	},

	"/static": {
		name:  "static",
		local: `static`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"static": {
		_escData["/static/report.gohtml"],
	},
}
