// Code generated by "esc -o static.go -pkg report static"; DO NOT EDIT.

package report

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/static/report.gohtml": {
		name:    "report.gohtml",
		local:   "static/report.gohtml",
		size:    30794,
		modtime: 1612611610,
		compressed: `
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
`,
	},

	"/static": {
		name:  "static",
		local: `static`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"static": {
		_escData["/static/report.gohtml"],
	},
}
