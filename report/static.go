// Code generated by "esc -o static.go -pkg report static"; DO NOT EDIT.

package report

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/static/report.gohtml": {
		name:    "report.gohtml",
		local:   "static/report.gohtml",
		size:    33426,
		modtime: 1620294630,
		compressed: `
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
`,
	},

	"/static": {
		name:  "static",
		local: `static`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"static": {
		_escData["/static/report.gohtml"],
	},
}
