// Code generated by "esc -o static.go -pkg report static"; DO NOT EDIT.

package report

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/static/report.gohtml": {
		name:    "report.gohtml",
		local:   "static/report.gohtml",
		size:    20124,
		modtime: 1603352393,
		compressed: `
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
a96p8ErzUX5D/Fe5fwYAAP//7HS2FJxOAAA=
`,
	},

	"/static": {
		name:  "static",
		local: `static`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"static": {
		_escData["/static/report.gohtml"],
	},
}
