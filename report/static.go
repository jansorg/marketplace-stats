// Code generated by "esc -o static.go -pkg report static"; DO NOT EDIT.

package report

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/static/report.gohtml": {
		name:    "report.gohtml",
		local:   "static/report.gohtml",
		size:    15023,
		modtime: 1602613047,
		compressed: `
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
BgAA//9ifSySrzoAAA==
`,
	},

	"/static": {
		name:  "static",
		local: `static`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"static": {
		_escData["/static/report.gohtml"],
	},
}
