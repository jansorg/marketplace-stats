// Code generated by "esc -o static.go -pkg report static"; DO NOT EDIT.

package report

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/static/report.gohtml": {
		name:    "report.gohtml",
		local:   "static/report.gohtml",
		size:    16328,
		modtime: 1602753751,
		compressed: `
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
`,
	},

	"/static": {
		name:  "static",
		local: `static`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"static": {
		_escData["/static/report.gohtml"],
	},
}
