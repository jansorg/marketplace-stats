// Code generated by "esc -o static.go -pkg report static"; DO NOT EDIT.

package report

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/static/report.gohtml": {
		name:    "report.gohtml",
		local:   "static/report.gohtml",
		size:    24455,
		modtime: 1606839000,
		compressed: `
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
`,
	},

	"/static": {
		name:  "static",
		local: `static`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"static": {
		_escData["/static/report.gohtml"],
	},
}
