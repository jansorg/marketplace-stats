// Code generated by "esc -o static.go -pkg report static"; DO NOT EDIT.

package report

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/static/report.gohtml": {
		name:    "report.gohtml",
		local:   "static/report.gohtml",
		size:    24521,
		modtime: 1609493528,
		compressed: `
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
`,
	},

	"/static": {
		name:  "static",
		local: `static`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"static": {
		_escData["/static/report.gohtml"],
	},
}
