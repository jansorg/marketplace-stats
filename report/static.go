// Code generated by "esc -o static.go -pkg report static"; DO NOT EDIT.

package report

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/static/report.gohtml": {
		name:    "report.gohtml",
		local:   "static/report.gohtml",
		size:    32470,
		modtime: 1617979193,
		compressed: `
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
`,
	},

	"/static": {
		name:  "static",
		local: `static`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"static": {
		_escData["/static/report.gohtml"],
	},
}
