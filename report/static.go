// Code generated by "esc -o static.go -pkg report static"; DO NOT EDIT.

package report

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/static/report.gohtml": {
		name:    "report.gohtml",
		local:   "static/report.gohtml",
		size:    15610,
		modtime: 1602751533,
		compressed: `
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
8n8DAAD//14MFnv6PAAA
`,
	},

	"/static": {
		name:  "static",
		local: `static`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"static": {
		_escData["/static/report.gohtml"],
	},
}
