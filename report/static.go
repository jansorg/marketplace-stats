// Code generated by "esc -o static.go -pkg report static"; DO NOT EDIT.

package report

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/static/report.gohtml": {
		name:    "report.gohtml",
		local:   "static/report.gohtml",
		size:    14700,
		modtime: 1602583195,
		compressed: `
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
`,
	},

	"/static": {
		name:  "static",
		local: `static`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"static": {
		_escData["/static/report.gohtml"],
	},
}
