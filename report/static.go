// Code generated by "esc -o static.go -pkg report static"; DO NOT EDIT.

package report

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/static/report-anonymized.gohtml": {
		name:    "report-anonymized.gohtml",
		local:   "static/report-anonymized.gohtml",
		size:    11347,
		modtime: 1633968791,
		compressed: `
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
755UtFMsAAA=
`,
	},

	"/static/report.gohtml": {
		name:    "report.gohtml",
		local:   "static/report.gohtml",
		size:    41140,
		modtime: 1662113103,
		compressed: `
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
AAD//yY9Ndm0oAAA
`,
	},

	"/static": {
		name:  "static",
		local: `static`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"static": {
		_escData["/static/report-anonymized.gohtml"],
		_escData["/static/report.gohtml"],
	},
}
