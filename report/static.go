// Code generated by "esc -o static.go -pkg report static"; DO NOT EDIT.

package report

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/static/report.gohtml": {
		name:    "report.gohtml",
		local:   "static/report.gohtml",
		size:    26855,
		modtime: 1612018166,
		compressed: `
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
`,
	},

	"/static": {
		name:  "static",
		local: `static`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"static": {
		_escData["/static/report.gohtml"],
	},
}
