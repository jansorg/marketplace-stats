// Code generated by "esc -o static.go -pkg report static"; DO NOT EDIT.

package report

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/static/report.gohtml": {
		name:    "report.gohtml",
		local:   "static/report.gohtml",
		size:    15232,
		modtime: 1602697324,
		compressed: `
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
`,
	},

	"/static": {
		name:  "static",
		local: `static`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"static": {
		_escData["/static/report.gohtml"],
	},
}
