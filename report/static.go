// Code generated by "esc -o static.go -pkg report static"; DO NOT EDIT.

package report

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/static/report.gohtml": {
		name:    "report.gohtml",
		local:   "static/report.gohtml",
		size:    31693,
		modtime: 1612634135,
		compressed: `
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
J0NtKqRFGQZiFc7+NwAA//8iBI+mzXsAAA==
`,
	},

	"/static": {
		name:  "static",
		local: `static`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"static": {
		_escData["/static/report.gohtml"],
	},
}
