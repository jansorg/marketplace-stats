// Code generated by "esc -o static.go -pkg report static"; DO NOT EDIT.

package report

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/static/report.gohtml": {
		name:    "report.gohtml",
		local:   "static/report.gohtml",
		size:    23453,
		modtime: 1606591619,
		compressed: `
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
`,
	},

	"/static": {
		name:  "static",
		local: `static`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"static": {
		_escData["/static/report.gohtml"],
	},
}
