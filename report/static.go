// Code generated by "esc -o static.go -pkg report static"; DO NOT EDIT.

package report

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/static/report.gohtml": {
		name:    "report.gohtml",
		local:   "static/report.gohtml",
		size:    21382,
		modtime: 1604474033,
		compressed: `
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
NXOls1F6w+Fbd/H/AQAA///VItMHhlMAAA==
`,
	},

	"/static": {
		name:  "static",
		local: `static`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"static": {
		_escData["/static/report.gohtml"],
	},
}
