// Code generated by "esc -o static.go -pkg report static"; DO NOT EDIT.

package report

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/static/report.gohtml": {
		name:    "report.gohtml",
		local:   "static/report.gohtml",
		size:    16368,
		modtime: 1602756851,
		compressed: `
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
`,
	},

	"/static": {
		name:  "static",
		local: `static`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"static": {
		_escData["/static/report.gohtml"],
	},
}
