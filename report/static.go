// Code generated by "esc -o static.go -pkg report static"; DO NOT EDIT.

package report

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/static/report.gohtml": {
		name:    "report.gohtml",
		local:   "static/report.gohtml",
		size:    14983,
		modtime: 1602662272,
		compressed: `
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
`,
	},

	"/static": {
		name:  "static",
		local: `static`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"static": {
		_escData["/static/report.gohtml"],
	},
}
