// Code generated by "esc -o static.go -pkg report static"; DO NOT EDIT.

package report

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/static/report.gohtml": {
		name:    "report.gohtml",
		local:   "static/report.gohtml",
		size:    33512,
		modtime: 1620321793,
		compressed: `
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
+P8AAAD//zpXkCDoggAA
`,
	},

	"/static": {
		name:  "static",
		local: `static`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"static": {
		_escData["/static/report.gohtml"],
	},
}
