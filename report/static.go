// Code generated by "esc -o static.go -pkg report static"; DO NOT EDIT.

package report

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/static/report-anonymized.gohtml": {
		name:    "report-anonymized.gohtml",
		local:   "static/report-anonymized.gohtml",
		size:    11347,
		modtime: 1633968791,
		compressed: `
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
755UtFMsAAA=
`,
	},

	"/static/report.gohtml": {
		name:    "report.gohtml",
		local:   "static/report.gohtml",
		size:    40933,
		modtime: 1662108991,
		compressed: `
H4sIAAAAAAAC/+x923LbSJLou74iD9o9FtskSMlWt5smecZttefoRLfHYdkzMXHiREwJKBI1AgF0VYE0
l8GNeZm33diXfpi3/Yx930/pL9hP2KgL7oULJUpy75iOsEigKisrK2+VlUhst/CI4iikHMZTsGG3O8ou
vQ858j9cnstbl8jHzJaXLuOluKrbzgll/G1MHQ8xzHJtX8WMh0tM2et8i6Sbj1p6/YCqnRx9Uzb9EUWG
fumtdByOGf8xDLgnW/+Q+73bHR1NPL70wUfBYmrhwJodTTyM3NkRAMCEE+7j2XarCWK/9eMFCS6CeWi/
QUu824EcDt7J25Ohaq/6LjFH4HiIMsyn1of3rwfPLX2L8Y2PYYldgqZWREnA9R3xsYNQXoJtekl8XMIi
H23GEIQBfpHe2h1VOvokuC51dkI/pGNYIXo8GHD8kQ/klZ4Rzm8jtMAlAIz8Ex7Dy2eCUC5zUJRDQXyW
iC5IMIaRfeYs81DlfIdywvnJZ9MdfgXneI5in8M8DDh8NcwQIUvJmTH1jx97nEdsPByKRsxehOHCxygi
zHbC5dBh7PR/z9GS+JvpD4iHY8KR318vPP7bUf/paPRi1H8m//9G/v/taPTiRF4/Edd/o2k7ZWsUPc4R
ZfgVvPJIgBmGOfL9K+Rc3x6/NyEPn1yigD25fFUZOYU9pmFYZoHBQLAmCRYDvZ5fjEaj0fOrF6VWQbhu
aTGPeUxx2uj5SPwrNxJ8lDZ5dvbsDH9d32SAHE5WeAxfzOdizHJLximJ8OBqkQCcn4p/lWY4QhTxkLbg
FoWMiPHSZicn3+Kn31YogReo0MyMXCYRimL19wcuYejKx64Bs5wIDb8CihkucLPQM324Ct1NH7yTPnin
ffCe9sF71gfvrA9RH1yy6gMX8PvAaR+41wfu9oGtFn0gy0UfXL8PLu+D65Z4IxXAIu4RcgXDVK77JMAD
D5OFx8dwYj+rm4VUjhwtWHkmpeEF1w8Ug4/hsRDBx314LFgdBKvD5avHfWAoYAOGKZkbhxOkqczq42BN
XO6N4floFH00K51TipeAYh4awRZp3aQYC9LVM8MyzXut6fhtmXPkXaU6T+0zipfF25KtkE8WwRgcHHBM
zRM4NQ2qwJ6UwOa7meab71rbURPrqg+M0zBYNM35+cgsAagPaLwijHBcZlU5bRc7IUWchEHZolWWJVMy
ZnuFxl64wrRpZSt6ygyJrcpz1cx3Mhp9WcQwkZ1atpNiXIJ2FVIXS9Xmo4jhMSTfzHwtVghGir3NVOae
ibaapXw850XAK0w5cZCftLhCDAtNUANbKJ8S/FSf2BI5+1kt+3FvLFy8geMR3xWQcj/NQAdUkbRuqmPp
aeYA5n7XQBQkqAeIkVuloF6jq5DzcDmGk+gjsNAnruakkoHqNYAWcqS/PU2/NQlkWT+sPcLxgEXIwUJI
1hRF5uHmwleomwkPoxtOw+U3kfwa06TX4rSiBXM6/iwvZUVDpDz/vBWyWXwl/e0GEShr1UYVWJnh01Gz
1TwzzEVb4WaxtZc4iMssKz0aoQ4ZJ871pmQqxCI2AUPlxUfO9YKGceAmjg1dXKHj07OzPmT/2c97jTCf
ABpf4XlIcUW7BhwHfAwW/Od/gGUGIlWg9vxc4NK+czoOuKeE9hivcNBrRVxzbMGB7DXoXMEY2pT3q5fA
e3oLhrmpiNpsiXy/Xvbt53V61OYk2DR0/Ka2Y+KqdtsLpp5tDUe4mDl9sEnghMvIxxwbcRJ7uzGI3Rdx
zHCukLvAgwCv+8l3x4tpgN3095xi3ESp8hqUpLIks1oLUuSSmI3hadmJTC2aUJGVu+mumwRymCs/dK5v
YVSz6bey/Rf466vnV8+NjlFxk1KFr0naPobjVPdD2V5p3jSGYZkMAzz75mv07dmeA8yJzzEdeMR1cbB3
HGT4VdII3DjyiYM4BhdxzIAEQMM1g3AOagyhlwTXF/Y3tmh809ET5IXvK1VPB2CKuerl7mZ6Q2pfoWLN
Pu3XZZdWdfDRJoz5GObkI3abIAs9gJyyizD8SoNfkmCgrcSLHG33GiiIl32wl2EgfFFJSBMlVogSJGyR
Ey6XYTDwyQLxmGImBop9RAdBvGQ3dK08hQR39V9PoiEv6C+e7YS+8l3l5fRXg5mR9+sGFACEs5RCEz86
+/kl+g0iP2ZNFqAYSenVA1qSoBlSMdhSAynClIUVjmxaDfER+7u5H67HoATJsI/OmmDfJxEjrIZ5Qxdt
GqeRRM96L/Z3fm0VWWuCn4+91RCJY7qEJ/qv0ZlWTn2t6GO6HARoiW/iv6vezAsp38PEV8A/G5lDUcZ9
QGXyUX0g6Kyst1r2FyX34PSscdgnhqE7UJxhRzjvrE7Dz31c8izElYFLqOo4FnbJ0ECIwhiqAvGXmHEy
3wxSP1wKz+AK8zUui4dUEwPC8ZIpRAaMI8obJ2I2GTWkb9/vaKgDkxesYRcDKUXgOhDSAnxOuBm0YJ7E
FN1qhDVxcb/40xjnMUaNSmchk6E6ZzqaiH3R7GjinTQdNE2G3olodAqOjxibWsnu15ptt/Y54th+HdIl
4mCdjkZfD0Yng9GptdtNruhswiIUFDWm6Dm1tluw3yFOgoX9h5Bj9iqMAw67HVB5kcEUck1eId+JfcSx
+g273XYLFAULDI+u+/BoJc/X8vBgt/vNFx9fvthuH13vdr/8/W9j2G4frXY7WInb2y3gwIXdzpr98ve/
iaHmcgqv/RDxhmEnQzEhScJTI01Abl8lsyVHbgg8iudT64tk8XjIkT9gyMfMmsljTXWWNxmiui66cVsz
TgnyBVD5t6HhgoZr7lmz38m/DQ2lB+RvErfemr3S/v0Hhinr0JFirnu+099auy78kDFEN9bsd/qbbKxo
fjRxySqlutZ9CamrtyAB6sSU4kDoqGso6ITc+edESVQCQWqMQiQh11a1zw5ss2u0eEE3nE2809l7jzAQ
KMi5TIbcM7ZNMAjiZbrm5aaTYXkg0caAjpLx/LVUduw/Ynxtn6ONEBcDIlQ0JXOwL9h76bvsdhoz6cpY
sN1in2Hd5LX0LtImytmwtlscuLsdVCeqxnCFEkkUDXdrmxVoIlSDygcQxPlwea5+JXpot4MPl+dmcFW6
pbqgTM0q5SYy3tltwYXrJZTF1Dq1KshLwneZQZdVL+I0GUqW1RIxdMlqdtQqHRuMqL95OMH4E0ZCJdxW
KExNX+OuLd8i4sLvY96pdWLIlP4+D9eBHyKXwXEQBoM4ID/FuGfN0ut3JMCSbjXC2ypKYhdp3bP4dQP3
GuPDARPL+vuY3wKg8g0uAg52uqBq3euodm9apqO8bLfVLCpNkDpV0wjmNca3B6IX5qZQcsti8F0ziZRr
dBg9mqjTG/og0msvOUi30LKZD6yn36ANqoqlRUsovbzdSqByE1Cnm1uVYzgH6b8CDyHAa0hS6Zg1e4PX
nYEqV7l783rF34qxCjjNsfC5m61CA6iXQMN44QFmnCwRx4IO3MOAgiBGPlAsXFKxraB4hYMYA5pzTCFC
G3FRDf7y3bv9x5VpBhmVxbgIJLtZs1cx4/beIBOnX6PO4ivmUHIll/ClvHZjkFoMijB/VBdvuHqp6Dfa
3xZQb+LlFaZyzeRmCrjw3TUVk/3VvnMOgxWmTEZrJFQhET5xcMAwxAEnvrQR4Rx04PkKMeyC0CBSfqpN
rJmAWbOgVSVX62XUeRpFb0Mui1HBVPYLigmTXNfCriHZERB3aslJDJIwglI16U/ZW2zRjcOVbLUmR+rN
wHY7MOJSC0yliEYoSEBmB47pCubOIPWA/6xDAnpW9ajWOhx1XswbvL6Zf3UHLtvB3bY7cd3qgCoV9U6p
2cPAbeSiNMZlK9ZLE8sVIrtdokifQLWN1n27Xaoap4ZWkk67HchYko50CY6pDiUsrhrO1CwbTbTTIyYN
tY5WoGwZotvtwCkag5hhyko9NNRKl2RGhT5JXKiKehI7KuFf6ZBNIu1R9a5MH8kcBsLCgQQZ5DEYpg4O
OFrgdmweId9X00/s43gK9svSRaUn22CROaDABfv/IJbr/U54IpVh7Av2JuTfLyO+aVORmZpM2bwKLln4
cA4VPlIE/8AwTVpV3QpwiQtByIFiwZfH+KPjxy5mII/+dcNI+t29FqoWY4ySEwdSvaIllgFgYSjk0wtz
sL60T+eWgTwp6d6miwm73ZdpELOeWVS8uGWpZBStA91/+evPraCqm8x7494cx2mRzFiurBpuxXBGPZNp
gQLXJW2qbGdwPYt8d3jOqiD+j8hXHY1nbdSlZPZM7T7IANxuByoS18q6DWMdzqMjc1hwsOXmIeNYGMnj
rBwGpQbysEuv5C9//Tldi/sQ5eMcwuneRZnIUa9wNw54en1/ga4bJBHm6jDCq5CtOXaNGyMpfJlU1Qxg
gPsrki3zDq8eojHcWBOZvOFRR+eAZBq1qgtMwp7hwCK8coTydtAqocp2cAlJvjGR5GHijyqkmJ6ICqan
BLN7Ougpcol3OnsfRvAqQaL58Gf2pZDsQxyFFuZWDag+WqKPwuc+GZUFQilFn8OxjwNQLgfdSJR6huZ5
eFNAritU++DE2Ls6kkEg0zDMMfOJg4swYCRH6u17FDQTfpKCs8cBUE5vy9koFHY7GaY6Fh75dmsnj3CX
Y/udj10Kyjt5Hrz0fPjDn78kNCishjROKWO3qojTA6qIPZWADEMaVYFgXulmqWCnEAo5Uf0zR8h7VxoS
hf1UR13E9uC6o7vqUCjdWHck3W+lPPRi3qv2mG23mpFQwJAyXvt1z2mG4wqoXoFtPzkFkYrPr0VDPJyb
8DTnJsjsLefT8RP0iYjGK1X7+4uPBrCHABy17pzrrbLQQwEG68PluQW5wRN7rX1nbbH1mcYd+AXZkcGh
nIME4p17CAcQKX3kN+CbCD+U832Zi6HC+02EPy3ByqN3Y+HaM6/ps1u7f1pR2yZ+n133yWhkj0ZfPpSh
e1Cp1LYuOYb69CQyWegEQ4HgfQlmljKWjK5D+J9F+95Eu0r5fzT9sMb42kWbBwuX/VGPf19qoemhARdt
PlvlT8GV5GFE3Adjye8R9QlmHP4v5t9RRAIGaSJFDZseNODCwygdT2ZKpL/sy5Dy7zYX5+ZYzELHYgoQ
mkIxhZGmoKIoxasjc+SnKRpTBHADWbo4b5GkWe6AWg800P0Kqf9odg+8nR5feKcy+6/2ITN9PA6lh83k
M3dR+vgCZo41k7f6sPZCiBBxYR7SJNs1O9pXuxwSyPzbiOIVCWOdzCmPOV3iBo85RGgjW+hnxVQDezKM
ZkfNudZNKZIykJfWAC3fQX450yf5WWxI5oB/yjdX8SQYVc/t8vKfq8SgZEjSPUlV0KtvzQ6VMP40z1Le
09md5qU2ysYvf/25K0PXe1V5Fm449W04jeu0MsViRXutU9NaNdIo0ejykeCppR4bfnr25Qur8zLmwSQJ
zsn2Re2h1Camra/B1p/HqkCfNUu+dQajHmqSdX/37PMDYhySsr8Nud3DWr4bNq6EmYuL9iAn38KAYfe7
zTna/H7emrw84TSZzXZL5mC/phjngyi7XVJlSUf1WnJAci6SKpyRc8SSFOvjfPy/Sx5e2rVLXlXCF6q0
sFVrxorJ//pJ6f/693/5t9YsqsaB/oJWSFFvzDCXXud7Qb/XssjO8WM9/OOe1TpGFpu9CFyyIm6cR/Tn
f+2EaN2yFlLWs/pI1kz83zE5vT2dKfM5wBZi3Zp/VJeL/RYRNxFqOCaBiz9WCnnbF+e9fQdIHmaEWpC3
hVgsG94FYL2qaE76MVqjpr1+Z3WfOvBncnNedid2u+yxoRtqQDNyqSntZBXTun2Fak+cBJu7MIF66LR4
krCAz2Zar02G3rPZXjZM9Xx4+5FthX5Hwzj6bqNn1GJFOotHjl4dNvUtZ8EpsvcuUr8+zhQa9NfClo+i
vLofTwscqvmyYBHKertmOTOOLwzwibG2/Qfkx/jhWLp4Ue69zaCzX9m32l16VtEl2aaXK7uY9unJtjbO
9usJoLveYKfo6R125fkh415bxYdy3Xs322wns/y83/7k99udlurXvOW+a98jlbQDKeLPO8+H3nkeeFf4
Ce+IThNnNM/Id78hOqyNLtd1M1nixGqrtn2QXqwsRxwa4uMq/H3DBw6Wyljn65/cV1UpOctu58rqYTFo
qRVR7qXLbLxqZo9yr4T46hTz+MPleW+vclPqsVR4lxYP0U+1N5QKKUKCpKyvVWD9N3h9p4fGtaVpulaX
0LmLIQf7rWbQTkFRIR2K01ut+p7n1HV+f60r9GvrVFO/rhVAs5JveWyuds32qS2yx/qa64TsdrWlQGbH
2Y/eoeOreUGVAV+/zO/lZ1wND70mtbdVdUb1W1Y0SiL/Rx19hk7P1oKbldvZbtWy5Z5m3hv7Q9HJWNeh
pozG3VCspmQHKtVn6kK2fSZzKAIaysUYa8gclHwNRWpUUk+hDlM74bpP4mB8V1Nspr4MzQEJ+PLdu7Gs
FtNc8UaRshPj3WA2h6JkpQCSoSbSAWmXEMEHx5MeSV3dOnko1Ea4Lsjf5BCt62wuazHPp7oZsDRJzF1s
62pTo26bXVTZFNXV24bvNqn7rrdKN60tnQQSH2Cn07VEYrnpRX3W7Uy4RvV306Oxugb1QShzokZD1sWd
PLOVe11zXeFrmX6Ti/cknXTm3KeSuFqJIfkkuO4UFhKfzuGmwuwfK8wL12rjSM3JiUcN4boUfkvcLitW
Unjh9nH+l33BkvOHPN69vcoBFt5vZc30l7ZqIa1xLbfl+UCNbbfnbAtdhBh2TLRuy57IEQ3uJQ26LlW0
+CKEis6WmjUJp2qAPrrCPsxDOrX0C7IkkEFmFFNMFMuPYUKCKOYypD61OP7I1fmAuXsyuLprQeQjB3uh
72KaC89fnFvyVeZTK30X+1Bils61ZCQqb/ownVgoVOTtBCrPv0Se5m1QSfVOvKezc8Sx4byhbCtEU2Ev
TA3lzZwZ7QLr5VIdRu/RWOnFWgTyOVEd8Eyer8q3y/i3YGLycS31Vn/G/4QRhfEUBie56Ky8k77tv3Cr
eLKpnoXRp99iBYDTGFcPIUMKxwHOjZhVSe1ld9SIuYqpveopJW2tUZN7j4l+W2WdkRM0S3PKu9VvLV2A
YnuVfO49NR9RGssbZSSZ5ohSl7ufUWmap5NBL9F88F2FdAqHyVKvYFeu2XgKc1QKZuWeXzU5FwJEQbMm
gDpp3aPyooKLOEr10EDogw6eSkXr1+ZuBHidIKjIdsmpeg1OS4S2QKdm050O0tIsD3FakZd9Y4x5s557
SaIq/JRh1GTbG4tsuY1kTzy3w7pftcPWyLHxuZAS81TdsFpHT6WnSjb5/qcY+czA6sZkVVlnMcDrDqHU
u3L10pwPiX+alVpK+Lx3x7GJEPX3CkPLN/gmid/W7FhWz51jigMHiyXu1WHRjYnlotfUk1BmO9vXFIpd
NFaWMCRSKWDd9knaDX6LKQmbxujkK5eNgvlEtuDWZhmFlUBE6fVcN3RfFZib+6/l/g/pwGpcPnUP9uDO
Y73v2Og6Ks757Dv+j/Yd89WsPruQn13IPV1IqSPuw4VUq6UZz8lHVX9EUYX1GtLgDuyI7rl4qXdkGuSg
q3cPHsdQXakmhhneqbn/iYd80S3HdJk/28g1S9/+LNORSq5o+m7n5J1B1SwmTe9SHtwkKlLovYcNb08K
58nJeuH1AH1Ye8TxgDD1fLhOclvhwA2pfuWSi93YkW94dcKAkyAmfFN+mbIsgyf3HktErzGXTpJ8S5Od
C2RGBawFDeYhzT9T3ofyK2QEZskrotzsjT+ij4s2TL5j3S5DnuClepnoEm3gCgMJkOPEVGjYyRAvZ/CW
hlQCjFJbgGiKhb+RSpZT5FxjFyj2CbryN/3CpK+wg2KGc7UdhLEAwuSj8jRcEWHq5Xm8gQQt5Sz24CS5
navnpdwRbDgHP2RcPWNQy0vFDrnnEYrvnECBiZ+SIgKGEgH17EqYWGQneZuwC2vCPUCwoIKHOFlKTL6R
623DhRpBWnLYCN9Es0OO8foqDSIM/I3gWUZcTFnxBdOGCggZcIadMHAVdMHTAi3ah6tQFkSQwilZ3QRE
MZIeFLv17N/GpAV8s4cxJHGWsc9J5GPT0EYeTkD7G7sAN+Xex4p9hYRLZs4EI5xnyTi20C4UP2YQhIlc
YFijjVAcxMUBJ/ONsHk6mbowVpHWdykT33/UOQrvEMesRV/mSECCVUgcrQxIIDbRtj4MJwGE3MNU09ch
OF1pXWWfh6q90L84QUDQvDBaLBSYoKFUuVJNCL22ydCw4YInPOGSuQxH8EQxFwArYIkK1ci7kjWFMi++
a16GCBrInh4pqTXSu2MURT5x5ONjw8yP0ivghk68xAG3F5h/72Px9bvNhXtccxLUs5Hrfr/CAf+BMI4D
TI8tNRurDxims9zL2k2xPmxzRBeY2yvkx7iv9gi9tIt6PEVdlRd3vUNheY03cZQg2R213lEnBMoBhz3p
VHFo74hOXdAsE6ojbppQ8zhIMkeqJCZuH/4SL6NebvYKs7Tmnmgt29UsbR8KJ4IZScgcjsuwxccPFevb
HmJii1t+43zaWHmcu+o0KgS4yTTKlO9DMTB0m4nooFvLTOowxIpPLty+imFduPmRhRXkoIJt01r+SmEU
pyG7KTaB/zWdAnHLk8q3EPdzc0i/DofKU+gD88I1IN8HtEAkKOEokb/EPnZ4SCV9LHiSTCltm87gpxjT
TdL8pe8fF/s/AQu4EJB5SL9HjndcElrxwbY0W0J0bIqX4Qqngqa3yr2u7VeEkSIb7HpHRVq6koSWVSZh
/Yz+/GhbmNQOVA4Rp+Mg5Mec/r9qbOTRlrg76//3/pzNnIbr6tylFgrXuRkh122e/q53a7zrEb4dvlXy
lxBORGoyVNZTbkQ9vvRn/x0AAP//prGqSOWfAAA=
`,
	},

	"/static": {
		name:  "static",
		local: `static`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"static": {
		_escData["/static/report-anonymized.gohtml"],
		_escData["/static/report.gohtml"],
	},
}
