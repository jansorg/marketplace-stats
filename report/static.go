// Code generated by "esc -o static.go -pkg report static"; DO NOT EDIT.

package report

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/static/report-anonymized.gohtml": {
		name:    "report-anonymized.gohtml",
		local:   "static/report-anonymized.gohtml",
		size:    11347,
		modtime: 1633968791,
		compressed: `
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
755UtFMsAAA=
`,
	},

	"/static/report.gohtml": {
		name:    "report.gohtml",
		local:   "static/report.gohtml",
		size:    41287,
		modtime: 1684501334,
		compressed: `
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
nwAAAP//GZJkR0ehAAA=
`,
	},

	"/static": {
		name:  "static",
		local: `static`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"static": {
		_escData["/static/report-anonymized.gohtml"],
		_escData["/static/report.gohtml"],
	},
}
