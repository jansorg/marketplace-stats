// Code generated by "esc -o static.go -pkg report static"; DO NOT EDIT.

package report

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/static/report.gohtml": {
		name:    "report.gohtml",
		local:   "static/report.gohtml",
		size:    21273,
		modtime: 1604322959,
		compressed: `
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
/7ufmQUZUwAA
`,
	},

	"/static": {
		name:  "static",
		local: `static`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"static": {
		_escData["/static/report.gohtml"],
	},
}
