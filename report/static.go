// Code generated by "esc -o static.go -pkg report static"; DO NOT EDIT.

package report

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/static/report.gohtml": {
		name:    "report.gohtml",
		local:   "static/report.gohtml",
		size:    11984,
		modtime: 1602171849,
		compressed: `
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
`,
	},

	"/static": {
		name:  "static",
		local: `static`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"static": {
		_escData["/static/report.gohtml"],
	},
}
