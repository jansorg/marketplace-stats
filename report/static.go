// Code generated by "esc -o static.go -pkg report static"; DO NOT EDIT.

package report

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/static/report.gohtml": {
		name:    "report.gohtml",
		local:   "static/report.gohtml",
		size:    32235,
		modtime: 1617451767,
		compressed: `
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
lGEgVuHsfwMAAP//LoAocut9AAA=
`,
	},

	"/static": {
		name:  "static",
		local: `static`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"static": {
		_escData["/static/report.gohtml"],
	},
}
