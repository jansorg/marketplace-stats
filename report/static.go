// Code generated by "esc -o static.go -pkg report static"; DO NOT EDIT.

package report

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/static/report.gohtml": {
		name:    "report.gohtml",
		local:   "static/report.gohtml",
		size:    20800,
		modtime: 1603735116,
		compressed: `
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
UQAA
`,
	},

	"/static": {
		name:  "static",
		local: `static`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"static": {
		_escData["/static/report.gohtml"],
	},
}
