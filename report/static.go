// Code generated by "esc -o static.go -pkg report static"; DO NOT EDIT.

package report

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/static/report.gohtml": {
		name:    "report.gohtml",
		local:   "static/report.gohtml",
		size:    19963,
		modtime: 1603351358,
		compressed: `
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
`,
	},

	"/static": {
		name:  "static",
		local: `static`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"static": {
		_escData["/static/report.gohtml"],
	},
}
