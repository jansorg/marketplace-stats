// Code generated by "esc -o static.go -pkg report static"; DO NOT EDIT.

package report

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/static/report.gohtml": {
		name:    "report.gohtml",
		local:   "static/report.gohtml",
		size:    14922,
		modtime: 1602609395,
		compressed: `
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
`,
	},

	"/static": {
		name:  "static",
		local: `static`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"static": {
		_escData["/static/report.gohtml"],
	},
}
