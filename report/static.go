// Code generated by "esc -o static.go -pkg report static"; DO NOT EDIT.

package report

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/static/report.gohtml": {
		name:    "report.gohtml",
		local:   "static/report.gohtml",
		size:    24533,
		modtime: 1609143195,
		compressed: `
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
AA==
`,
	},

	"/static": {
		name:  "static",
		local: `static`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"static": {
		_escData["/static/report.gohtml"],
	},
}
