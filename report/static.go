// Code generated by "esc -o static.go -pkg report static"; DO NOT EDIT.

package report

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/static/report.gohtml": {
		name:    "report.gohtml",
		local:   "static/report.gohtml",
		size:    33164,
		modtime: 1619895637,
		compressed: `
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
`,
	},

	"/static": {
		name:  "static",
		local: `static`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"static": {
		_escData["/static/report.gohtml"],
	},
}
