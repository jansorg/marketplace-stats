// Code generated by "esc -o static.go -pkg report static"; DO NOT EDIT.

package report

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/static/report.gohtml": {
		name:    "report.gohtml",
		local:   "static/report.gohtml",
		size:    16475,
		modtime: 1602871366,
		compressed: `
H4sIAAAAAAAC/+xc63LbuPX/rqc4w81urPxFipaT/aeypG42nrSeabuZOGmnHyEREtHwVgC0rHI4sw+x
T7hP0gEI3kGKcmKvO7PKjC2SBwcHB79zJZwkgWcURyHlMF+CBWk6Km99DDnyPt1cyUc3yMPMkrduYl/c
TdPRaOFy31uNFi5GzmoEALDghHt4lSSKifXei3ckuA62ofU35OM0BckKPsjHi2lGn431MUewcRFlmC+N
Tx/fma8N9Yjxg4eBHyK8NDi+49MNY+qZ+PxAfLmKmHpnz13OIzafTrdhwJm1C8Odh1FEmLUJfTFu9sct
8ol3WP4F8XBOOPIm+53Lf7AnF7Z9aU9eyp//L3/+wbYvz+X9c3H/O4ewyEOHJduj6Pn4clRIMKdhyCEp
rsXHNIViSLAzN6EX0jl8Y9u2/Xp92aAKwv0RCo8EnwuSl69evsLfN0kYpyTC5nqXk21n4l+LDEeIIh7S
gt1rW/wr6dJyUdMXQDHDHF5Mi3tiyyewDp3DBNzzCbizCbgXE4gm4JDbCXC09vAEOJ0AdyfAnQmw290E
iL9rqMdHdEeCOdh1GSPkCJ217nskwKaLyc7lczi3XnZJLAQEjnasKXVjegEPM0PCHJ4LLDyfAEMBMxmm
ZKtlL5bdWsWduScOd+fw2raju0vtGmcU+4BiHmrZlnpsMFd7dIvoWQNMYz0f3Rr3SmcCy+2njPwHz2Fm
vaLYrz8WdmYij+yCOWxwwDHVCz/TTZqxPW+wrQ676BnWOUiBbT0BxmkY7PrW+9rWoxpNAM1vCSMcO43x
cskO3oQUcRIGcwjCAF92b0lpl2PtVOy2KaGCyrltf1vnmyO7EyTSsBrc1iF1sDRlD0UMzyH/pkeh0CvY
GRj1uuGuTiMKBB7e8jrjW0w52SAvp1gjhoWddvAW7qDBv7B2SwpnvewEDHfnHmLc3LjEcwSnyqWeqUkz
lXYtdb4ltMawct3BUaigmyFGTluDao/WIeehP4fz6A5Y6BFHQajhkMc9rAX61bc+42na8d4lHJssQhss
AL2nKNJPshUhrEt+Hkb3FH76AjYx46FfdcgWi9cy9vfgrel0er1Ey/wv7P4A0nZ4RUDqtxFLWqIKuA5w
GRQ4nQfczbBzhm9xMG6qEW0+72gYB45ZcyH1uD3uMX2hMhUDJu1bbUycosr7YsZiPvK8bjBar7vMWWlR
qErvIl81PWQ2wEOHMOZz2JI77Og5B7E/AcsPA+FxLAdxrBPwFlGCAi58pu+HgemRHeIxxUxMFHuImkHs
s3uakpsJwR3125ViyBsaeao7JX1Wh8ZCBx36MoQikRxfnh4WLYY3Iuixxgwq5Z3D1sON7EbcMR1Cs4Fz
oOFeQyC0NIe6rsTnXzHjZHswN2HAsdgIqVdzjfke46BXxoGIGWrQiqupA7PiXQ/LdeYqrB5hvicOntQv
tTFdmyHoGIpKiesHv+7WRDO/kOXVVNZXq9FimpVyo4VwaqKyO++r5RZT91wQzWDjIcaWRu7UjVWSWFeI
Y+tdSH3EwZjZ9vemfW7aM0OOm61GoySZvlg45LYYrQBorF5MZSk6fSGla5NAXQfFlfRy2GkwEJ+yrrU+
El8mKdYVRfubv/8J0rQ+39QhtyWHyuVIL+3oqJQxpTgQsP4MNaxVSthFhoWcg0RiLdBUaDP6suou79H6
DUW4Wriz1UeXMBAiSO0vptzV0uYSBLFvrGSt3iZdTJsTCRqNOBmKqveSBCgKdhisf2D82bpCBwZpqhGE
ClKyBeuafZR+L02VZNINGkmCAydN22vIhjsCgTlKudNJVltukoDqcYh1f7q5yq5yEKcpfLq50rNrqyRJ
AAdOc3GLqUYpC5l6DdtL4fFZhIKlMTNawkudDlnBkA2ty7SYSjQqsEubGB0F/gEj6h1+O8z/M5tfwfhL
Ya8jfYeHUr5HxIGfYv5A5iSW2mVKR9EvchLjkS1mGLt3GH89ZmILfor5k7LngZBMknYPVq2jy6h72bzD
+MuZKH0e53JP/5K7mXuGXZli5ReyHPAOX+B9ClvLE4kek2tb7xFTzPxVkkimKkPS74ZuRyQohpN3Oy0N
NciMbmnIOcAnQcxgizHr82hHWL0BGsY7FzDjxBflULgF7mJAQRAjDygWCZOoaakoD2NsrN58+HD6LBtO
brHqPWDKxCwIJA6M1duYcetkln/NQAQbN6YBdiBmmDJj9VZc3lOhV+E+8ELkMGNVfO0ww6nWhUw7wdZ2
TPWQIVejBXArBct0KQd0JGJAnKUhlWvmuX8G5eJSjk5TQ6+khgdX2zQgJD1AWPrqoemrh6dupiZYb6QZ
fchsp3TO92HYSSfbFhmOk8TK4PE2t7RMgDTNDfr/oE2jTClNQXlmMCFJPByA9TazroI0TQuDW2o4SSWm
KXDx+7tv7t5cCtTgfVucAO+VSDqyUiJBl0uVbZRuSjgNlRDEvhlhKopUtMM9ZqCsVFjenxGT2vggvGSH
oRbTibKg3JQuVYZbocOCq1xK5XnhLidSR3s3hLVw1jz3nSKfj9dsQ0kkoy0JpO+OKL4lYcxyBztgdTsO
Z1opx2AfW6xcMAKX4u3S+EbCwxQbJbwFCCcjLCGiJOBbML61ZlsDyjW/L3YB0vTbxRQdlRZ7DA8R6def
fznKqp1Etn262MonJNSpTsgqQpkyzp6sXRvVukXSJtxdSffxpGtwzlRpIHUl4tCXRA/i2czKv5xjK0Uf
wnL12E87U5v2lraR8QCVQ1YMFO27MA44JZg9UuuibPFcGFnrLozgbS5ER2lwUhOhJne7zHnmozuYL+G8
5YYzx+0VjlsKdZBQG2vIq/yWgBznOuBgnmtHt2fSeIAieT1jHtngOg+w5UzjU7sgwmEpPif0PspIC3I1
mQhpCgx5+IyNpR/MD1E16+PBLYwyYYCCWfOEVpfQ9+5h3KvX91Rs5mXFZmTfffM4RqOKKjXnIYfD6UhU
DE6A4uhoht4NUWHPAQbj082VAZXJc/CqwKTgq4q9BzCSsqz6WpaSc/xfMBfhzAKGTX6I8G8VZW4qWf3j
2Ut11nvbzIlt699d91PHYl4KwsdDhB/TeWfTill/B+NTACMPI+I8fhIxy2D4k+dgxqFoTDxG7s3DqJhP
nr0vrqybkPIfD9dX+qw8b6fUOIzhVVdSXptoCVlCXb9rt0cfycvr4+9hPddXR2xnVWn7qIlMNa7WL0ar
R0BzUWe6s1X+ckB1s+ATyxEz6n911NeRz7YW/3t4p6xuIJVTdhngZJ8+75cpZRmrr/UK66K6A+7F6kHf
ZPRC6deffxm6/93vcas73tN061R5/aTo09mAnP76SB8oi76P8jKqiexOZ3dUEaUzKdrBR/uXkljONYxU
KAYevK2pxV85vrwqv42y2pcjT/2h1Y+HInxlvujeZ9hyp159vf5ogXnYy+4m6XX3iYaVgEb3U9UP6ibQ
m8YD5qR9+WjmUyrRMB+kwuLTyUPrkvUH+ir1gKS6Rj+sn1cbInb0UVLgatJQHk0bNQyodU5YF0fE3jBT
Ps5tmFf/GpNW7dOtH/cSweIKcayJE3ksqXgODUltawX5G19o/STiDD+dAjR6EsfkzMvFKl25dTVTrEYk
kQ17iHGRlYmU2zyvuFj5JDv5oH0kVCieGEb1idwYcbv2OqaV8T0jk2dytBpQz/z2hLtwRgIH3+UEZ5Um
OovX4muW9LOsi/6MjMdjfX0QUjgLcGWl5SmNcfkkW2nlxMap7fRKFfW9UTkYrv5Ope/4h9i3Irkfdpak
cQPq9FkV4F50xuiO3KcGiGVFUV3JSB0ny6r+OqJ9y53IxupoSDhsHNvsFCjA+xycmTw3XJ6q6l5D1gsu
YV2w6Hk3nCQl/bIY0TvgKN/ePEmbXnaVhY1AqAspnYViK3h1t8ozZ1ZGxVofv7dprgmRGbNhUVYFsfeY
krBvjkGRrg7LrmSzFueK+LaY5jfkfwrw3wAAAP//UMktv1tAAAA=
`,
	},

	"/static": {
		name:  "static",
		local: `static`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"static": {
		_escData["/static/report.gohtml"],
	},
}
