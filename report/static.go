// Code generated by "esc -o static.go -pkg report static"; DO NOT EDIT.

package report

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/static/report.gohtml": {
		name:    "report.gohtml",
		local:   "static/report.gohtml",
		size:    24523,
		modtime: 1607346676,
		compressed: `
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
AA==
`,
	},

	"/static": {
		name:  "static",
		local: `static`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"static": {
		_escData["/static/report.gohtml"],
	},
}
