// Code generated by "esc -o static.go -pkg report static"; DO NOT EDIT.

package report

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/static/report.gohtml": {
		name:    "report.gohtml",
		local:   "static/report.gohtml",
		size:    31650,
		modtime: 1612613430,
		compressed: `
H4sIAAAAAAAC/+w97ZIbN3L/9yk6Y/u0lMkhd1fyyRTJnKy1nE3ZdyqtdFdXqVQdOANycDsExhgMKYbF
qnuApPLn/ucx8j+Pck+QR0jhY74xM+R+Sa7cusoiZxqNRqO/0GiAux18yXHEuIDxFFzY70/yR++ZQOGH
60v16hqFOHbVo+tkJZ8a2AXhsXibcC9AMY4LsK+TWLAV5vGbIkTaLEQdrX5E9UaeealAf0KRpV32KutH
4Fj8xKgIFPSPhe/7/cnJJBCrEEJEl1MHU2d2Mgkw8mcnAAATQUSIZ7udYYj7NkyWhF7RBXN/i1Z4vwfV
HbxTrydDDa/brrBA4AWIx1hMnQ/v3wxeOOZVLLYhBrGN8NQR+KMYenHswAr7BE2diBMqDKT8cylTj2CX
PZJ/PomjEG3HQBnFL7NX+5Naw5DQm0pjj4WMj2GN+OlgICkYqCe9Ih5F6VCR2kZ2TujwKVziBUpCAQtG
BTwdZq9+Q1ZKxhIenj4JhIji8XAogWJ3ydgyxCgiseuxlUR5/o8LtCLhdvojEmxMBAr7m2UgfjPqX4xG
L0f9Z+r/v1b//3Y0enmmnp/J578yXJnGGxQ9KQxn+BReB4TiGMMCheEceTd3p++3TLCvrxGNv75+Xes5
wz3mjFUnbzCQQkbocmBm4ovRaDR6MX9ZgaJs0wGxSETCcQb0YiT/qwJJCchAnj1/9hx/0wwyQJ4gazyG
LxYL2WcVMhacRHgwX6YIF+fyvxoYjhBHgvEO2iIWE9lfBnZ29i2++LbGCbxEJTA7cbksa45ZFWP4FDiO
cUlCpRXow5z52z4EZ30IzvsQXPQheNaH4Hkfoj74ZN0HgeYh7oPgfRBBH4Tfh3i97ANZLfvgh33wRR98
vzLfK8SXhI6hQm+EfCkEtechoXgQYLIMxBjO3GdNo1CmS6BlXB1JpXspyQMttGN4ItXqSR+eSPEFKb5w
/fpJH2JE40GMOVlYu5OsqY3q42BDfBGM4cVoFH18aR3zOccrQIlgVrRlXreZqZLG9Oy4bOPeGD5+W5UW
9TYm/4bHcO4+53hVfq1ECYVkScfgYSowtw/g3NapRntWQVtsZhtvsWljQ8OseR9iwRldto35RYMGoD6g
8ZrEROCqqKph+9hjHAnCaNW/1KYlNxw9e1fjgK0xb5vZmu2xY4rX1bEa4Tsbjb4qU5jqTqPYKTWuYJsz
7mNlrkIUxXgM6Se7XMsZgpEWbzuXRWDjrRGpEC9EGfEac0E8FKYQcxRjaQkacEvjU8Gf2RNXEec+axQ/
EYxlADbwAhL6ElPhqx3pgGuWNg11rOLAAsLC9waMkgXNCDHy6xw0czRnQrDVGM6ijxCzkPhGkipOp9eC
WuqR+XSRfWpTyKp92ARE4EEcIQ9LJdlwFNm7W0j/3zQSwaJbDsMXt9H8Btdk5uK8ZgULNv55UcvKjkjH
5UUv5MbJXEXDLSpQtaqtJrA2wotRu9d8bhmL8cLtauuuME2qIquiFGkOY0G8m23FVchJbEOGqpOPvJsl
Zwn102CFL+fo9Pz58z7k/3Nf9Fpxfg1oPMcLxnHNulKBqRiDA//z3+DYkSgTaKI5H4Ty74KPqQi00p7i
Naa9TsKNxJaCwl6LzZWCYVx5v/4Igos7CMxtVdSNVygMm3XffdFkR11B6Lal4a8bG/o49vrgEuqxVRRi
ga1Y5IprDHINRDw7njnyl3hA8aaffvaChNOaXy8Np8qoiupUFMuYKo58ksRjuKhGepnbkXas9jZbqBKq
upmHzLu5g+fLR9wpm1/gb+Yv5i+s0Uvj6qCVi5Y+PK++EMkXKfZg2l2QUGA+CIjvY3r0yn74NAUCP4lC
4iGBwUcCx0AocLaJgS1A9yF1W2pZaY3gSuDb9p4SL+NHpb4HINNz36wJt9M9ZcGkmbLHhd9Uw0LdIERb
logxLMhH7LdhlpqJvKqbHT416FeEDoylfVng7VEd0WTVB3fFqIznFCNtnFgjTpC05x5brRgdhGSJ5LI/
lh0lIeIDmqziW4YngSZC+ObfQJGhHpgPgeuxUMd/6nH2rcVUq/eNYx5EYRK3LQnKWYFeM6IVoe2YyomD
BkwR5jGrSVEbB+WfXNcsQrYZgxZ+y/oxB8FhSKKYxA0Cx3y0bR1GmgnqvTw+6HN1lqgNfzGP1MAkgfkK
vjb/WoNIHcw2qivmqwFFK3ybuFW3jgPGxRGOsob+2ciegrHGv7XBR80JkOdVW9MRV1c87vnz1m6/tnR9
AMdj7MmgNW6yyosQV5y1fDLwCdcNx9KXWACkKoyhrhB/TmJBFttBFn8q5RnMsdjgonpYaLRb8Aaudofw
BuvAFtgZ3OXcQBm5Wdt3IF8QYUct5SL1DHfqYUN83C9/taYurImQSgp/MtQbGycTGerPTibBWdvOxmQY
nEmgc/BCFMdTJ13QObPdzr1EArtvGF8hAc75aPTNYHQ2GJ07qt25tR2oVYuakHQfBEHA8WLqfJEOUDCB
wkGMQhw7M7XXpDdYJkPU1MQAd4EtOduIwJn9oP5tAVS+ONym8Z8ze20CwQ8x5q09hCyOEd86sx/MJwWs
+XGy2w2fTnyyzrhiVNOZPR2qnarhU4W2DgJpB16AuMi/qbWQJLCEQP7lO3jue7JSkbR7ydHm+vc/wH5f
7m/ok3WOofD1xE7tSSeVCeeYSoW/gZIWFnaKJlqGUwxKR0vL0QKshs/35PJnvPzAAM4mwfnsfUBikCQo
7k+GIrDCphTQZJVJUBV0Mqx2JGEs5GitKj7b7YAjusTg/gHjG/cSbWPY7y2EcAlKFuBexe9VILDfG8pU
XODAbofDGBuQN8pVZyDaczu7Hab+fg/1geo+fKm2qWoLvxGsxJPdDsyWr2TOh+tL/S3V/P0ePlxf2tHV
+bbbAaZ+lQOToYVzE5U0O2zCZRwTR4hOnXOnRrxi/CEjOGTWyzRNhkpkjUYoxTnp1I4tRjzcfjrF+CNG
0ojdVSlsoG/woZBvEfHhd4k4CBqU85g62htcsg0NGfJjOKWMDhJKfk5wz5llzx9IgRXfGpS3U5XkMsp5
ZPU7DN0bjO8PmZzW3yXiDggXquUVFeBmE6rnvYlrj2ZlDtSX3a5eKGMY0mRqWtG8wfjuSMzE3BZLYVos
0WKukWqO7seOpub0ljGIipMrAd0drGxmBtLht1iDumHpsBLaLu92CqkJn+0zY5sdJWaHgzfb6E7LqxMt
CyyD7XYD3oLqFXCWLAPAsSArJDCwBYgAA6I0QSFwLKNHQpfA8RrTBANaCMwhQlv5UHf+6t274/tV28qQ
lo+p9CgCJRnO7HUSC/dolD9psYI0T5zI5YFZLdySxZkqtfozu1o1+rUm31b2b2o0VpGuRaial2kBXSlO
TWNQ4k8dxdxBulTUwp19Va33e8fOpIp3MNOU+U/Y7QZWWhqRZUhlnJiizXdenNlp/qU3GUqomRlLs/96
AId97077QRx3E9JXSonfac29H7ytM2p0Z7dztRhklaOakP0+NStfQx3GqO9+D8Y/wNQCpfi034PKS/zq
i4+vXkopxJt6VxRvTHc2sLw3CWd6NIAhpuCaJEPWYL/PDEtKnzEwrSxR02AZQptyHDMhoHL3mHuYCrTE
3dRINf0nFKvhvZMG/2AtzWa3iT9sIScsw6zGWeJf+rmvGL0JGMyl8xGp5ZfrsGQee5xEKnogVPmiiOM1
YUmcuocDhrgUcGolswejg0acJZPUpA/kNEpbB9JESmun6ngX4Hzlni8cyAf9NpsK2O+/ypJTLdSqPMIB
JP3tL3/tRFUPs+uypWzp50PUA1ifxkVLxW7Y4D6o9et+D3oh2ylsLX3dYsj2KKKZidZFVMN66yGWVln8
3bTEgiMXNmV81bXW3bDVFl3d6NI81jNn9rmspPTiKMvtsoQKTnD8SCmrYmpP53VZBK9TItrTWLOvpIe4
j6RuaWz1peGXK/QRxlM4q5l67RzCzDkowreKpJ4FvIhvCsj3pZ4Pzqyt6z1ZlDAL70/jkHi4jANGqqfe
sUktGYcbPEeksnJzCWo0moT9HmIU4tO4p8L79LxRNUtxcAIpj0wgQ1Y9zPTpM0kpD0qzIQOWXLA7TcT5
PZqIX4wRuCgYAbXL5H0+VsCsow1d2aQer1oGwRG6ddIZojTrnDRQFIPz4frSgULnqTYaz2j0sXNNfGut
zxe396X6KcYH1/97UClpnWmMB2Ib4U/lWq+LS6H32wh/XopVJO/WynXk/svfndbxMXpXiH5MTH02Grmj
0VefytF9Uq00vi7NJHx+GplOdEqhJPCxFDPf2kp7V7HU31X7EVW7zvn/b/Zhg/GNj7afbDH8B9P/Y5mF
tuImH23/7pU/h1BSsIj4n0wkv0c8JDgW8M9YfMcRoTFkufAGMb3XVIxgUdafuu0j++ZeMy6+215d2pM0
aQa/hKEtSVPqaQo6wVJ+OrKnhNoSNWUEt9Clq8sOTZoV9hpMRwPTrlSihGaPINtZcjI4V3vGjTW46WZ7
pRZXVRpHWZkVjj1npl71YRMwiBDxYcH4URs+gKgPPvHpEwER2ioIU9OqAdzJMJqdtNeEtG2sqxRfdh1N
5Q1ZAP758M2ksnIXzkNpBVFMTbeUzNQ6s/uqWrkoyktwMXvQUoVWwf/bX/56qLQ2h0xF+WzZl2pJpB80
M+Vjt0fNU9tctfIoNdfqJMDU0acFLkZfvXQOnsbi1Ou1SAdUyWWXOj57LjvWinEwGl1DqW6SOrLNjygW
kF4k1VKZM2yUsGErz+3yWkkLVlTZeKNLJPBPKIoIXVYvxGrb0Gub5ko0ow+2FWKmtIbmtJjG73VsPOrB
mKaH7Ganc68voHIaPU65/skc5fjf//r3/+zcym7t6M9ojbSZH8dYqADxvVS7N+rg6ukT0/2TXkbAFfXJ
mvhJkYq//kcnFe3byblfBlfqDHSVEzVU1tSuPVObi8azuFeXxp+o0qpj+0hrk4FQH3+s3ebmqoDpThjL
cn0IwmZVbN/gt9r1tiXxwYYzi3Ofy5E1Vuzkoe6trIydwMwxHeRjsvscSieYBaHbh3AopuvsQLD0J89m
xq5MhsGz2VF+Qrf8XGz0D5wl0XdbM5r7ssgFXh2w9m22CloIc+l7ZJX65UmlKlpemajjlyGZX0a5nR9P
LX7AiGjRHVTFuOIc2pWg2OFnJu/u71GY4E8n5+WHat1qR51/yz/VVrjV46i2lWy66NWwfVBqo+7zYJZ1
q16W3rLMR6tF6fzEY51KU6M8LN+rq+Wgqza+0srU/r9ud87VVinzdXbx9MP1Ze/A7nTN8bvsKIMpiIbT
V+/e9R77eNqhFf6mEoAJcN9yvO6sqJ8IruRZy2bnqvXIjG+TFWhc5/9CGrVbp44i2EaWH3M044jpsR+z
2O9vc4ri7ouoYhH6bqfL6nJRrVbUWkps01tn9FFq/V2daTIkOp3LzdaK30olL/j5WZ7dTk9ZoVj7KMrv
gz/WQwENpx0ehlMNJytQ5WRWF7uOGch9MM5ymsd6xOde2dZyhkjvZIEISHZAoZ1hhw/gXuSs4QxQ8+mg
e2Tcq3fvxuoQT/tBJM3CTkG7xUjuPzZt3C+665ZLLSJtunoFvttmsZOJU297MUi6IvkEYeahh2aroFfN
pQgz6Sab32ZJkCaA5iy6fKsy3S1p6wepXS2sLpsuKlE7FYU0btrI7CB+Lhv4tdRwSOhNtyExfwdnkUuj
f6IpLz1rzCC3b9KetGThM/wd6XgdFSLql38D47T4zb2K0y3VIt29znNdxRCwdF+mMzMfuo5+da7H/Y46
aUPtYWcRSk2k5nXDN2XEC3yCR6kAadolL998VbPMxYu2QjTHISwYnzrm8k7VOLPJBcXV0j2GCaFRIgq/
9qF3Ke3N0071WweiEHk4YKGP+dTJahivLlN6hoqgbGgVy1+77cy2XaopUK9TrKL4yy286FgqW4KT4GJ2
iQS27HdWHYAElU7ABqheFnzjIbherXQi8QhgbfkaCShWRh9AZ1pJWoTLxbXkRIo5h/Qne/6IEYfxFAZn
hXyXepP9xE7pVblIQlf9maylykgKnuB6DQTjcEpxocf8FoFe/kb3WLhRoFevj+gqXPq1U7inzlxC3eTG
JM+y6pnD7jeoPIAyvC6zCS7s9RHWo5k5S6YFpjRVKeVcmhb5ZDFDvJjO1Gv2UsWKcqLYV3M2nsICVbIV
hUp9W/hQ+6GoFNFBRvakOqngI4Ey8zOQ9uCAWKS2SdmYd6d4kxKo2XYtVC6vM3tW4lO7c8466QArYpzW
9OXYJFLRcRfubdb7zDlFbd679YCw38r2NDa73wCrsdsGPbZWwFWEpx5oNYZyahmsxeT7nxMUxhZR3+8t
IRPFG2dG8eaAXNlDBXNZyZneHzq179k/emjYxgj7u8NET01Vw3k37Wzz9UbpMF7ryTfLZpVGdtj6xYSn
bzEnrK2Pg2LYqim370yVYs8s5pwM9YP6bpXlatPjMwHqvlyB+aq45i+AZfdDqzueyoKU3/7cvMNixKqy
OTeJygx6H2DLPVNskWYiixWiqo6UeAGQWBeTmp23NaY+4+ZyKh/7iSckMo9RQWhCxLZ63bI6M6vUd4X4
DRYqPlb3WbmF0D8qUS15sGC8WIDah8LPRegaUhJnl2n56ncTfGC6rNVH21j9ypBbxTzBK31D6gptYY6B
UOR5CZcGbDLEqxm85YwrhFFmAxDPqAi3ytUJjrwb7APHIUHzcNuHOfZQEuO8+LvMBiRQ6QGJVY0tZ2ui
fvpDBMTGjo46+COkSlnHZrkq5AHZAkIWC33nTqNclRskeeGxT3zFIo71tUA22Uqrjy21xc2iS2I54R4K
vSRUE7QhIgAESy7lSZCVouRCzb0LV7oH5YxgK8NEIxoFIezrVDKj4VbKb0x8zMvzZiudLsyT/DMdxdhj
1Nc9SVmXJPI+zJmqqlZKq1TAhlALmCEA+81q0SW8JcLyKgjFqFUSChKF2Na1VbZT1OG2POBMwp8osVaa
r0475ArDFvmmhiutDsdPYqAs1RcMG7SVBoX4mAqy2MpQ2NQglvpq4PsD6Mf3H71AxfDvZFDRYUcLLCB0
zYhnjASh0tO5JnlMKDARYG746xGczfQac6GLGRS8tMs4JUDyvNRbIg2b5KEyxcpkSHu3zclw4UqkMuGT
xQIrrTIGu4RYI0tNqyHeV6IpjXypX6T8eAvbs+SMniOTL0GR/lUWwugwj3LVDPjMS1aYCneJxfchlh+/
2175pw2ZlZ6LfP/7NabiRxILTDE/dfRYnD5gmM7MTfC6dR5Dn2JXIL7Ewl2jMMH69xI5FtICqsXbCcC+
dz/03OBtEqXkdBHSk5K6SGi6OVCP+4nfaxoU8fVAQqaZ6wYolmvb6nXwJ+Y6/awfGybTiTQ6AnS2a3o0
OxQKspCRc5SYMcI/TKeQdwBQfCffqMdmVTscagPdhzhgG0BhCGiJCFUvM2p+TjDfXuMQe4LxV2F46nxR
SICBkBOzYPx75AWnBakAwK7SczlZLscrtsbZUMzKr9cNaX7px4Dueyf5qH01WMfJB9tM85/KNGe/OMbE
qeD/Ul/Sf7kj/t75196f8rFxtimODoCzTYFu5PtNw9v3bklfM2G3o6vMzIywvZLZyVCbCmlRhoFYhbP/
CwAA//9n7xrsonsAAA==
`,
	},

	"/static": {
		name:  "static",
		local: `static`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"static": {
		_escData["/static/report.gohtml"],
	},
}
