// Code generated by "esc -o static.go -pkg report static"; DO NOT EDIT.

package report

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/static/report.gohtml": {
		name:    "report.gohtml",
		local:   "static/report.gohtml",
		size:    16386,
		modtime: 1602874938,
		compressed: `
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
hvzt/v8CAAD//9xDB84CQAAA
`,
	},

	"/static": {
		name:  "static",
		local: `static`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"static": {
		_escData["/static/report.gohtml"],
	},
}
