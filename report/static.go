// Code generated by "esc -o static.go -pkg report static"; DO NOT EDIT.

package report

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/static/report.gohtml": {
		name:    "report.gohtml",
		local:   "static/report.gohtml",
		size:    27662,
		modtime: 1612169292,
		compressed: `
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
AgAA//+W2iKvDmwAAA==
`,
	},

	"/static": {
		name:  "static",
		local: `static`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"static": {
		_escData["/static/report.gohtml"],
	},
}
