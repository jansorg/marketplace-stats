// Code generated by "esc -o static.go -pkg report static"; DO NOT EDIT.

package report

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/static/report.gohtml": {
		name:    "report.gohtml",
		local:   "static/report.gohtml",
		size:    12884,
		modtime: 1602493357,
		compressed: `
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
zFQyAAA=
`,
	},

	"/static": {
		name:  "static",
		local: `static`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"static": {
		_escData["/static/report.gohtml"],
	},
}
