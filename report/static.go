// Code generated by "esc -o static.go -pkg report static"; DO NOT EDIT.

package report

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/static/report.gohtml": {
		name:    "report.gohtml",
		local:   "static/report.gohtml",
		size:    16643,
		modtime: 1602875503,
		compressed: `
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
G/I/L/hfAAAA//9RRPQvA0EAAA==
`,
	},

	"/static": {
		name:  "static",
		local: `static`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"static": {
		_escData["/static/report.gohtml"],
	},
}
