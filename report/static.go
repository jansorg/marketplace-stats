// Code generated by "esc -o static.go -pkg report static"; DO NOT EDIT.

package report

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/static/report.gohtml": {
		name:    "report.gohtml",
		local:   "static/report.gohtml",
		size:    18965,
		modtime: 1603297648,
		compressed: `
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
`,
	},

	"/static": {
		name:  "static",
		local: `static`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"static": {
		_escData["/static/report.gohtml"],
	},
}
