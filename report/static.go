// Code generated by "esc -o static.go -pkg report static"; DO NOT EDIT.

package report

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/static/report.gohtml": {
		name:    "report.gohtml",
		local:   "static/report.gohtml",
		size:    35695,
		modtime: 1627155565,
		compressed: `
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
rMPF/wUAAP//O+0zem+LAAA=
`,
	},

	"/static": {
		name:  "static",
		local: `static`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"static": {
		_escData["/static/report.gohtml"],
	},
}
