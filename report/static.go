// Code generated by "esc -o static.go -pkg report static"; DO NOT EDIT.

package report

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/static/report.gohtml": {
		name:    "report.gohtml",
		local:   "static/report.gohtml",
		size:    32275,
		modtime: 1617704846,
		compressed: `
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
`,
	},

	"/static": {
		name:  "static",
		local: `static`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"static": {
		_escData["/static/report.gohtml"],
	},
}
